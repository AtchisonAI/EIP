using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;

namespace EIP.Common.Entities.ECharts
{
    public static  class DataTableExtensions
    {
        /// <summary>
        /// 将DataTable转换为EChart Option
        /// </summary>
        /// <param name="dtData">DataTable</param>
        /// <param name="chartType">Chart 类型：line,bar,pie</param>
        /// <param name="Title">Chart Title</param>
        /// <param name="subTitle">Chart Sub Title</param>
        /// <param name="columnAxis">DataTable中用于作为坐标轴的列名</param>
        /// <param name="columnSeries">DataTable中用于作为Series的列名</param>
        /// <param name="columnValue">DataTable中用于作为值的列名</param>
        /// <param name="stackName">Stack名</param>
        /// <param name="chartDirection">Chart 方向</param>
        /// <returns></returns>
        public static ChartOption ToChartOption(this DataTable dtData, ChartType chartType,string Title, string subTitle,string columnAxis,string columnSeries, string columnValue, string stackName,ChartDirection chartDirection)
        {
            ChartOption option = new ChartOption();
            if(string.IsNullOrWhiteSpace(Title) == false)
                option.title = new Title() { text = Title, subtext = subTitle };
            option.ChartDirection = chartDirection;
            option.tooltip = new ToolTip();
            option.legend = new Legend();
            if (chartType == ChartType.Pie)
            {
                option.tooltip.trigger = "item";
            }else
            {

                option.tooltip.formatter = null;
            }

            option.toolbox = new ToolBox();
            dtData.AddToChartOption(option, chartType, columnAxis, columnSeries, columnValue, stackName);
            return option;

        }

        /// <summary>
        /// 将DataTable添加到已有EChart Option中
        /// </summary>
        /// <param name="dtData">DataTable</param>
        /// <param name="chartType">Chart 类型：line,bar,pie</param>
        /// <param name="columnAxis">DataTable中用于作为坐标轴的列名</param>
        /// <param name="columnSeries">DataTable中用于作为Series的列名</param>
        /// <param name="columnValue">DataTable中用于作为值的列名</param>
        /// <param name="stackName">Stack名</param>
        /// <returns></returns>
        public static ChartOption AddToChartOption(this DataTable dtData,ChartOption option, ChartType chartType, string columnAxis, string columnSeries, string columnValue, string stackName)
        {

            DataTable dtAxis = dtData.Distinct(columnAxis);
            DataTable dtSeries = dtData.Distinct(columnSeries);

            List<string> lstAxis = new List<string>();
            List<Series> lstSeries = new List<Series>();
            List<object> lstData = new List<object>();

            //Add New Series
            foreach (DataRow drSeies in dtSeries.Rows)
            {
                Series series = null;
                switch (chartType)
                {
                    case ChartType.Line:
                        series = new LineSeries() { name = drSeies[0].ToString() };
                        break;
                    case ChartType.Bar:
                        series = new BarSeries() { name = drSeies[0].ToString() };
                        break;
                    case ChartType.Pie:
                        series = new PieSeries() { name = drSeies[0].ToString() };
                        break;
                    default:
                        series = new Series() { name = drSeies[0].ToString() };
                        break;
                }
                series.data = new List<object>();
                if (string.IsNullOrWhiteSpace(stackName) == false)
                {
                    series.stack = stackName;
                }
                
                lstSeries.Add(series);

                foreach (DataRow drAxis in dtAxis.Rows)
                {
                    string axis = drAxis[0].ToString();
                    if (lstAxis.Contains(axis) == false)
                    lstAxis.Add(axis);
                    DataRow[] drData = dtData.Select(string.Format("{0}='{1}' AND {2} = '{3}'", columnAxis, axis, columnSeries, series.name));
                    if (drData.Length == 0)
                    {
                        if (chartType == ChartType.Pie)
                            series.data.Add(new { name = axis, value = 0 });
                        else
                            series.data.Add(0);
                    }
                    else
                    {
                        if (chartType == ChartType.Pie)
                            series.data.Add(new { name = axis, value = drData[0][columnValue] });
                        else
                            series.data.Add(drData[0][columnValue]);
                    }
                }
            }

            if (chartType != ChartType.Pie)
            {
                if (option.ChartDirection == ChartDirection.Horizontal)
                {
                    if (option.xAxis == null)
                    {
                        option.xAxis = new Axis() { type = "value" };
                    }

                    if (option.yAxis == null)
                    {
                        option.yAxis = new Axis() { type = "category", data = lstAxis.Cast<object>().ToList() };
                    }
                    else
                    {

                        option.yAxis.data.AddRange(lstAxis);
                        option.yAxis.data = option.yAxis.data.Distinct().ToList();
                    }

                }
                else
                {
                    if (option.yAxis == null)
                    {
                        option.yAxis = new Axis() { type = "value" };
                    }

                    if (option.xAxis == null)
                    {
                        option.xAxis = new Axis() { type = "category", data = lstAxis.Cast<object>().ToList() };
                    }
                    else
                    {
                        option.xAxis.data.AddRange(lstAxis);
                        option.xAxis.data = option.xAxis.data.Distinct().ToList();
                    }
                }
            }

            if (option.series == null)
            {
                option.series = new List<Series>();
            }

            option.series.AddRange(lstSeries);
            return option;
        }

        private static DataTable Distinct(this DataTable dtData,params string[] columns)
        {
            DataView dataView = dtData.DefaultView;

            DataTable dataTableDistinct = dataView.ToTable(true, columns);
            return dataTableDistinct;
        }
    }

    

    public enum ChartType
    {
        Line,
        Bar,
        Pie
    }

    public enum ChartDirection{
        Vertical,
        Horizontal
    }
}
